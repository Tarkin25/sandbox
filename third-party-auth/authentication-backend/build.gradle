plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

def jwtVersion = '0.11.2'
def googleClientVersion = '1.31.2'
def mapStructVersion = '1.4.0.Final'

dependencies {
    // Spring Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Spring Data JDBC
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

    // Spring Data R2DBC
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Spring Webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Google Client
    implementation "com.google.api-client:google-api-client:${googleClientVersion}"

    // Flyway
    implementation 'org.flywaydb:flyway-core'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    // PostgreSQL
    runtimeOnly 'io.r2dbc:r2dbc-postgresql'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // JWT
    compileOnly "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}

compileJava {
    dependsOn processResources
    options.compilerArgs += [
            '-Amapstruct.unmappedTargetPolicy=IGNORE',
            '-Amapstruct.defaultComponentModel=spring'
    ]
}
